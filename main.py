# --- IMPORTATIONS & CONFIGURATION GLOBALE ---
import os
import pytz
import asyncio
import logging
import datetime as dt
import pandas as pd
import numpy as np
import requests
import matplotlib.pyplot as plt

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# --- SUIVI JOURNALIER DES PERFORMANCES ---
from collections import defaultdict

daily_stats = {
    "total_signals": 0,
    "wins": 0,
    "losses": 0,
    "directions": [],
}
# --- PARAM√àTRES DU BOT TELEGRAM ---
TOKEN = "8450398342:AAEhPlH-lrECa2moq_4oSOKDjSmMpGmeaRA"
CHAT_ID = "1091559539"
TIMEZONE = pytz.timezone("Europe/Paris")

# --- PARAM√àTRES DE L'ANALYSE ---
PAIR = "ETHUSDT"
INTERVALS = ["1m", "5m"]  # Analyse sur M1 + M5
LIMIT = 200  # Nombre de bougies √† r√©cup√©rer

# --- INITIALISATION DES LOGS ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# --- INITIALISATION DU BOT TELEGRAM ---
application = Application.builder().token(TOKEN).build()

# --- SUIVI JOURNALIER DES PERFORMANCES ---
from collections import defaultdict

daily_stats = {
    "total_signals": 0,
    "wins": 0,
    "losses": 0,
    "directions": [],
}
# --- üìà R√âCUP√âRATION DES DONN√âES DE MARCH√â (Binance) ---
def get_ohlcv(pair="ETHUSDT", interval="1m", limit=200):
    url = f"https://api.binance.com/api/v3/klines"
    params = {
        "symbol": pair,
        "interval": interval,
        "limit": limit
    }
    try:
        response = requests.get(url, params=params)
        data = response.json()

        df = pd.DataFrame(data, columns=[
            "timestamp", "open", "high", "low", "close", "volume",
            "close_time", "quote_asset_volume", "number_of_trades",
            "taker_buy_base_asset_volume", "taker_buy_quote_asset_volume", "ignore"
        ])

        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
        df.set_index("timestamp", inplace=True)
        df = df[["open", "high", "low", "close", "volume"]].astype(float)

        return df

    except Exception as e:
        print(f"Erreur lors du t√©l√©chargement des donn√©es : {e}")
        return pd.DataFrame()

# --- üîß CALCUL DES INDICATEURS TECHNIQUES ---
def calculate_indicators(df):
    if df.empty:
        return df

    df["EMA9"] = df["close"].ewm(span=9, adjust=False).mean()
    df["EMA200"] = df["close"].ewm(span=200, adjust=False).mean()

    delta = df["close"].diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(14).mean()
    avg_loss = loss.rolling(14).mean()
    rs = avg_gain / avg_loss
    df["RSI"] = 100 - (100 / (1 + rs))

    exp1 = df["close"].ewm(span=12, adjust=False).mean()
    exp2 = df["close"].ewm(span=26, adjust=False).mean()
    df["MACD"] = exp1 - exp2
    df["MACD_Signal"] = df["MACD"].ewm(span=9, adjust=False).mean()

    df["BB_MA"] = df["close"].rolling(window=20).mean()
    df["BB_STD"] = df["close"].rolling(window=20).std()
    df["BB_upper"] = df["BB_MA"] + 2 * df["BB_STD"]
    df["BB_lower"] = df["BB_MA"] - 2 * df["BB_STD"]

    stoch_rsi_period = 14
    rsi_min = df["RSI"].rolling(stoch_rsi_period).min()
    rsi_max = df["RSI"].rolling(stoch_rsi_period).max()
    df["StochRSI"] = 100 * (df["RSI"] - rsi_min) / (rsi_max - rsi_min)

    return df

# --- üß† D√âTECTION DU SIGNAL TRADING AVEC SCORE DE FIABILIT√â ---
def detect_signal(df):
    last = df.iloc[-1]
    prev = df.iloc[-2]

    confirmations = []
    explanations = []

    # RSI
    if last["RSI"] < 30:
        confirmations.append("CALL")
        explanations.append("RSI < 30 (survendu)")
    elif last["RSI"] > 70:
        confirmations.append("PUT")
        explanations.append("RSI > 70 (surachet√©)")

    # MACD
    if last["MACD"] > last["MACD_Signal"] and prev["MACD"] <= prev["MACD_Signal"]:
        confirmations.append("CALL")
        explanations.append("MACD croisement haussier")
    elif last["MACD"] < last["MACD_Signal"] and prev["MACD"] >= prev["MACD_Signal"]:
        confirmations.append("PUT")
        explanations.append("MACD croisement baissier")

    # EMA Trend
    if last["EMA9"] > last["EMA200"]:
        confirmations.append("CALL")
        explanations.append("Tendance haussi√®re (EMA9 > EMA200)")
    elif last["EMA9"] < last["EMA200"]:
        confirmations.append("PUT")
        explanations.append("Tendance baissi√®re (EMA9 < EMA200)")

    # Stochastic RSI
    if last["StochRSI"] < 20:
        confirmations.append("CALL")
        explanations.append("StochRSI < 20")
    elif last["StochRSI"] > 80:
        confirmations.append("PUT")
        explanations.append("StochRSI > 80")

    # R√©sultat global
    call_count = confirmations.count("CALL")
    put_count = confirmations.count("PUT")

    if call_count > put_count:
        signal = "CALL"
    elif put_count > call_count:
        signal = "PUT"
    else:
        signal = None

    # Fiabilit√©
    total = len(explanations)
    confirm = max(call_count, put_count)
    score = round((confirm / total) * 100) if total > 0 else 0

    return signal, score, explanations

# --- üì§ ENVOI DU SIGNAL FORMAT√â SUR TELEGRAM ---
async def send_signal_telegram(signal, confidence, explanations):
    now = dt.datetime.now(TIMEZONE)
    trade_time = (now + dt.timedelta(minutes=1)).strftime("%H:%M")
    context_text = "\n".join([f"üîπ {e}" for e in explanations])

    message = f"""
üìä *NOUVEAU SIGNAL - ETH/USDT*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üïê *Heure de trade* : {trade_time}
üìà *Direction* : {signal}
‚è± *Dur√©e* : 60 secondes
‚úÖ *Fiabilit√©* : {confidence}%

üìå *Analyse technique :*
{context_text}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è Place l‚Äôordre *quelques secondes avant {trade_time} pile*.
    """.strip()

    keyboard = [[InlineKeyboardButton("üõë STOP", callback_data="stop")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=message,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )

# --- ‚úÖ R√âSULTAT DU TRADE APR√àS 60 SECONDES ---
async def send_result_after_trade(signal, entry_price):
    await asyncio.sleep(60)

    latest_data = get_ohlcv(PAIR, "1m", limit=1)
    if latest_data.empty:
        return

    exit_price = latest_data["close"].iloc[-1]
    result = None

    if signal == "CALL":
        result = "‚úÖ GAGN√â" if exit_price > entry_price else "‚ùå PERDU"
    elif signal == "PUT":
        result = "‚úÖ GAGN√â" if exit_price < entry_price else "‚ùå PERDU"

    variation = round((exit_price - entry_price) / entry_price * 100, 3)
    direction = "‚ÜóÔ∏è" if variation > 0 else "‚ÜòÔ∏è"

    reason = ""
    if result == "‚ùå PERDU":
        reason = "üîé *Le march√© s‚Äôest retourn√© apr√®s le signal.*\nPeut-√™tre une m√®che ou un volume trop faible."
    elif result == "‚úÖ GAGN√â":
        reason = "üìà *Le signal a bien √©t√© confirm√© par le march√©.*"

    msg = f"""
üéØ *R√âSULTAT DU SIGNAL*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìä R√©sultat : {result}
üìà Direction : {signal}
üí∏ Entr√©e : `{entry_price:.4f}` | Sortie : `{exit_price:.4f}` {direction}
üìä Variation : `{variation}%`

üìå *Analyse rapide :*
{reason}
    """.strip()

    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=msg,
        parse_mode="Markdown"
    ))

    # M√©morisation du r√©sultat
    daily_stats["total_signals"] += 1
    if result == "‚úÖ GAGN√â":
        daily_stats["wins"] += 1
    elif result == "‚ùå PERDU":
        daily_stats["losses"] += 1
    daily_stats["directions"].append(signal)

    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=msg,
        parse_mode="Markdown"
    )
# --- üîÑ ANALYSE AUTOMATIQUE & ENVOI DE SIGNAL ---
async def monitor_market():
    while True:
        try:
            df = get_ohlcv(PAIR, "1m", LIMIT)
            if df.empty:
                await asyncio.sleep(15)
                continue

            df = calculate_indicators(df)
            signal, confidence, explanations = detect_signal(df)

            if signal and confidence >= 20:
                await send_signal_telegram(signal, confidence, explanations)
                entry_price = df["close"].iloc[-1]
                await send_result_after_trade(signal, entry_price)
            else:
                now = dt.datetime.now(TIMEZONE).strftime("%H:%M:%S")
                print(f"[{now}] Aucun signal fiable d√©tect√©.")

        except Exception as e:
            print(f"Erreur dans monitor_market() : {e}")

        await asyncio.sleep(15)
    # M√©morisation du r√©sultat
    daily_stats["total_signals"] += 1
    if result == "‚úÖ GAGN√â":
        daily_stats["wins"] += 1
    elif result == "‚ùå PERDU":
        daily_stats["losses"] += 1
    daily_stats["directions"].append(signal)

    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=msg,
        parse_mode="Markdown"
    )
# --- üïê MESSAGE DE RAPPORT P√âRIODIQUE SANS SIGNAL ---
async def send_no_signal_report(df):
    if df.empty:
        return

    now = dt.datetime.now(TIMEZONE).strftime("%H:%M")
    last = df.iloc[-1]
    rsi = last["RSI"]
    ema9 = last["EMA9"]
    ema200 = last["EMA200"]
    tendance = "‚ÜóÔ∏è Haussi√®re" if ema9 > ema200 else "‚ÜòÔ∏è Baissi√®re"

    msg = f"""
üïê *RAPPORT P√âRIODIQUE ‚Äî {now}*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîç Aucune opportunit√© fiable d√©tect√©e.
üìä RSI actuel : `{round(rsi, 2)}`
üìà Tendance : {tendance}

üí§ Le bot continue de surveiller le march√© ETH/USDT...
    """.strip()

    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=msg,
        parse_mode="Markdown"
    )
    
# --- üì° R√âCUP√âRATION DES ACTUS TWITTER ---
import subprocess

def get_latest_tweets(keyword="ethereum", limit=10):
    try:
        command = f'snscrape --max-results {limit} twitter-search "{keyword}"'
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        tweets = result.stdout.strip().split("\n")
        return tweets[-limit:]  # Retourne les derniers tweets utiles
    except Exception as e:
        print(f"[TWITTER] Erreur r√©cup√©ration tweets : {e}")
        return []
tweets = get_latest_tweets("ethusdt")
for t in tweets:
    print(t)

# --- üí¨ ANALYSE DE SENTIMENT D‚ÄôUN TEXTE ---
from textblob import TextBlob

def analyze_sentiment(text):
    try:
        blob = TextBlob(text)
        polarity = blob.sentiment.polarity  # Va de -1 (tr√®s n√©gatif) √† +1 (tr√®s positif)
        if polarity > 0.1:
            return "positif"
        elif polarity < -0.1:
            return "n√©gatif"
        else:
            return "neutre"
    except Exception as e:
        print(f"[SENTIMENT] Erreur : {e}")
        return "neutre"
tweets = get_latest_tweets("ethusdt", 5)
for t in tweets:
    sentiment = analyze_sentiment(t)
    print(f"> {sentiment} : {t[:100]}")

# --- üß™ √âVALUATION DU SENTIMENT GLOBAL DES TWEETS ETH ---
def evaluate_market_sentiment():
    tweets = get_latest_tweets("ethusdt", 10)
    sentiments = {"positif": 0, "n√©gatif": 0, "neutre": 0}

    for t in tweets:
        result = analyze_sentiment(t)
        sentiments[result] += 1

    total = sum(sentiments.values())
    if total == 0:
        return "neutre"

    dominant = max(sentiments, key=sentiments.get)
    return dominant

    # --- Ajustement du score selon l‚Äôactualit√© Twitter ---
    sentiment = evaluate_market_sentiment()
    if sentiment == "positif":
        score += 5
        explanations.append("üí¨ Sentiment Twitter global positif")
    elif sentiment == "n√©gatif":
        score -= 5
        explanations.append("üí¨ Sentiment Twitter global n√©gatif")
    else:
        explanations.append("üí¨ Sentiment Twitter neutre")
# --- üìä ENVOI DU R√âSUM√â JOURNALIER √Ä 23h59 ---
async def send_daily_summary():
    total = daily_stats["total_signals"]
    wins = daily_stats["wins"]
    losses = daily_stats["losses"]
    directions = daily_stats["directions"]

    winrate = round((wins / total) * 100, 2) if total > 0 else 0
    tendance = max(set(directions), key=directions.count) if directions else "Aucune"

    msg = f"""
üìÜ *R√âSUM√â DE LA JOURN√âE ‚Äî {dt.datetime.now(TIMEZONE).strftime("%d/%m/%Y")}*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìà Total signaux : `{total}`
‚úÖ Gagn√©s : `{wins}` | ‚ùå Perdus : `{losses}`
üéØ Taux de r√©ussite : `{winrate}%`
üìä Tendance dominante : *{tendance}*

üí§ Bonne nuit ! Le bot reprendra demain matin automatiquement.
    """.strip()

    # R√©initialisation des stats pour demain
    for key in daily_stats:
        daily_stats[key] = 0 if key != "directions" else []

    await application.bot.send_message(
        chat_id=CHAT_ID,
        text=msg,
        parse_mode="Markdown"
    )
# --- üîÅ LANCEMENT DU BOT & T√ÇCHES PLANIFI√âES ---
if __name__ == "__main__":
    scheduler = AsyncIOScheduler()

    async def periodic_report():
        df = get_ohlcv(PAIR, "1m", LIMIT)
        df = calculate_indicators(df)
        await send_no_signal_report(df)

    scheduler.add_job(periodic_report, "interval", minutes=30)
        scheduler.add_job(send_daily_summary, "cron", hour=23, minute=59)
    scheduler.start()

    application.add_handler(CommandHandler("start", lambda update, context: update.message.reply_text("ü§ñ Bot actif et en surveillance...")))

    application.run_task(monitor_market())
    application.run_polling()

